<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>net.maniec</groupId>
  <artifactId>app</artifactId>
  <version>1.0-SNAPSHOT</version>
  <!-- <packaging>jar</packaging>  -->
  <name>jenkins-docker-agent</name>

  <properties>
    <!-- https://maven.apache.org/general.html#encoding-warning -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
  </properties>

  <dependencies>
    <!-- JUnit 5 Platform -->
    <!--
        To get started, you need to add at least a single TestEngine implementation
        We can get the required dependencies by adding the junit-jupiter dependency to the test scope
        This is an aggregator artifact which simplifies dependency management because it has the following transitive dependencies:
        -   The junit-jupiter-api    dependency (compile scope) provides the public API for writing tests and extensions
        -   The junit-jupiter-params dependency (compile scope) provides support for writing parameterized tests
        -   The junit-jupiter-engine dependency (runtime scope) contains the implementation of the JUnit Jupiter test engine that runs our unit tests
                If in our classpath, the Maven Surefire and Failsafe plugins can run tests which use JUnit 5
        Maven Surefire Plugin > After declared the required dependencies, we have to configure the Maven Surefire Plugin
    -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>5.9.0</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <!-- Maven Compiler Plugin -->
        <!--
            Has two goals, which are already bound to specific phases of the default lifecycle:
            -   compile     – compile main source files
            -   testCompile – compile test source files
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.10.1</version>
          <!-- For convenience, we can set the Java version as properties of the POM -->
          <!-- <configuration><source>9</source><target>9</target></configuration> -->
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Maven Surefire Plugin -->
      <!--
          Is used during the test phase of the build lifecycle to execute the unit tests
          It generates reports in two different file formats: *.txt and *.xml
          By default, these files are generated in ${basedir}/target/surefire-reports/TEST-*.xml
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M7</version>
      </plugin>

      <!-- Maven JAR Plugin -->
      <!--
          Provides the capability to build jars
          However, just executing 'mvn package' will be enough since 'jar' is the default packaging type
          Usually there is no need to mention 'maven-jar-plugin' explicit because it's bound to the Maven Build Life Cycle
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.0.2</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>net.maniec.app.App</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- Maven Enforcer Plugin -->
      <!--
          Has two goals:
          -   enforcer:enforce        >   runs during a project build to execute rules specified in the configuration
          -   enforcer:display-info   >   shows current information about the built-in rules that are present in the project's pom
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <!--
                    These rules enable a project-wide lock-in of required Maven and Java versions
                    This eliminates the disparity might arise from using diff versions of Maven and JDK in dev envs
                -->
                <requireMavenVersion>
                  <version>[3.8.3,)</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>11</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>